openapi: 3.0.1
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks in the database (get, create, update, delete)
servers:
  - url: /
paths:
  /api/v1/tasks/{id}:
    get:
      summary: Get a task by ID
      description: Retrieve detailed information about the task identified by the given UUID
      parameters:
        - name: id
          in: path
          description: UUID of the task to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response with the task data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        "404":
          description: Task with this 'Id' is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundExceptionResponse'

    put:
      summary: Update an existing task
      description: Update the task identified by the given UUID using the provided data
      parameters:
        - name: id
          in: path
          description: >
            UUID of the task to update. 
            In the request body, you may include only the specific attribute you wish to change. For example, to update just the title, send a JSON payload containing only the 'title' field.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: JSON payload containing the fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDto'
      responses:
        "200":
          description: Successful response with the updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        "404":
          description: Task with this 'Id' is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundExceptionResponse'
        "400":
            description: Validation Error. Json payload contains invalid data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MethodArgumentExceptionResponseDto'
    delete:
      summary: Delete a task
      description: Delete the task identified by the given UUID
      parameters:
        - name: id
          in: path
          description: UUID of the task to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No content, task successfully deleted
        "404":
          description: Task with this 'Id' is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundExceptionResponse'

  /api/v1/tasks:
    get:
      summary: Get all tasks
      description: Retrieve a list of all tasks stored in the database
      responses:
        "200":
          description: A JSON array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'
        "404":
          description: Task with this 'Id' is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundExceptionResponse'

    post:
      summary: Create a new task
      description: Save a new task with the provided details and return the created entity
      requestBody:
        description: JSON payload containing the new task data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDto'
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        "400":
          description: Validation Error. Json payload contains invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodArgumentExceptionResponseDto'

components:
  schemas:
    TaskDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the task
        title:
          type: string
          description: Title of the task
        description:
          type: string
          description: Detailed description of the task
        status:
          type: string
          description: "Current status of the task (it should be values of enum: 'PENDING', 'IN_PROGRESS', 'COMPLETED')"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the task was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the task was last updated

    TaskUpdateDto:
      type: object
      properties:
        title:
          type: string
          description: New title for the task
        description:
          type: string
          description: New description for the task
        status:
          type: string
          description: "New Status for the task (it should be values of enum: 'PENDING', 'IN_PROGRESS', 'COMPLETED')"
          format: enum('PENDING', 'IN_PROGRESS', 'COMPLETED')

    NotFoundExceptionResponse:
      type: object
      description: Standard structure for NotFoundExceptions responses
      properties:
        httpStatusCode:
          type: integer
          format: int32
          description: HTTP status code returned by the API
          example: 404
        exception:
          type: string
          description: Fully qualified name of the exception or error type
          example: "NotFoundException"
        message:
          type: string
          description: Human-readable description of what went wrong
          example: "Task with ID 123e4567-e89b-12d3-a456-426614174000 was not found"
        path:
          type: string
          description: The request path where the error occurred
          example: "/api/v1/tasks/123e4567-e89b-12d3-a456-426614174000"
        timestamp:
          type: string
          format: date-time
          description: Date and time when the response was generated (ISO 8601)
          example: "2025-06-19T18:14:39.124Z"

    BadRequestExceptionResponseDto:
      type: object
      description: Standard structure BadRequestException responses
      properties:
        httpStatusCode:
          type: integer
          format: int32
          description: HTTP status code returned by the API
          example: 400
        exception:
          type: string
          description: Fully qualified name of the exception or error type
          example: "BadRequestException"
        message:
          type: string
          description: Human-readable description of what went wrong
          example: "Update payload must not be null"
        path:
          type: string
          description: The request path where the error occurred
          example: "/api/v1/tasks/"
        timestamp:
          type: string
          format: date-time
          description: Date and time when the response was generated (ISO 8601)
          example: "2025-06-19T18:14:39.124Z"

    MethodArgumentExceptionResponseDto:
      type: object
      description: Standard structure MethodArgumentNotValidException responses
      properties:
        httpStatusCode:
          type: integer
          format: int32
          description: HTTP status code returned by the API
          example: 400
        exception:
          type: string
          description: Fully qualified name of the exception or error type
          example: "MethodArgumentNotValidException"
        message:
          type: string
          description: Human-readable description of what went wrong
          example: "title can't be null or empty"
        path:
          type: string
          description: The request path where the error occurred
          example: "/api/v1/tasks/"
        timestamp:
          type: string
          format: date-time
          description: Date and time when the response was generated (ISO 8601)
          example: "2025-06-19T18:14:39.124Z"
